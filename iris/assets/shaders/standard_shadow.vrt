#define MAX_LIGHT_COUNT 8

uniform mat4 u_modelMatrix;
uniform mat4 u_viewMatrix;
uniform mat4 u_projectionMatrix;
uniform mat4 u_mvp;

uniform float u_time;

attribute vec3 a_vertexPos;
attribute vec2 a_texCoord;
attribute vec4 a_fragColor;
attribute vec3 a_fragNormal;

attribute vec3 a_tangent;
attribute vec3 a_bitangent;

struct Material
{
    float shininess;
    vec4 color;

    sampler2D mainTexture;
    sampler2D specularMap;
    sampler2D normalMap;
    sampler2D displacementMap;
	sampler2D shadowMap;

}; uniform Material material;

struct Light
{
    int type;

    mat4 viewMatrix;
    mat4 projectionMatrix;
    mat4 lightSpaceMatrix;

    vec3 position;
    vec3 direction;

    vec4 color;
    float range;
    float intensity;

    float spotAngleInner;
    float spotAngleOuter;

    float ambientStrength;

    vec4 specularColor;
    float specularStrength;

}; uniform Light light[MAX_LIGHT_COUNT];

varying vec3 v_vertexPos;
varying vec2 v_texCoord;
varying vec4 v_fragColor;
varying vec3 v_fragNormal;

varying vec3 v_tangent;
varying vec3 v_bitangent;
varying mat3 v_tbn;

varying vec4 v_shadowCoord;

highp mat3 transpose(highp mat3 p_matrix)
{
    highp vec3 v0 = p_matrix[0];
    highp vec3 v1 = p_matrix[1];
    highp vec3 v2 = p_matrix[2];

    highp mat3 outMat = mat3(
        vec3(v0.x, v1.x, v2.x),
        vec3(v0.y, v1.y, v2.y),
        vec3(v0.z, v1.z, v2.z)
    );

    return outMat;
}

void main()
{
    v_vertexPos = a_vertexPos;
    v_texCoord = a_texCoord;
    v_fragColor = a_fragColor;
    v_fragNormal = a_fragNormal;

    v_tangent = a_tangent;
    v_bitangent = a_bitangent;

    //mat4 mvp = u_viewMatrix * u_projectionMatrix * u_modelMatrix;
    //gl_Position = mvp * vec4(v_vertexPos, 1.0);
    gl_Position = u_mvp * vec4(v_vertexPos, 1.0);

	v_shadowCoord = light[0].lightSpaceMatrix * u_modelMatrix * vec4(v_vertexPos, 1.0);
	
    mat3 modelMatrixView = mat3(u_modelMatrix * u_viewMatrix);
    vec3 cameraSpaceNormal = normalize(modelMatrixView * v_fragNormal);
    vec3 cameraSpaceTangent = normalize(modelMatrixView * v_tangent);
    vec3 cameraSpaceBitangent = normalize(modelMatrixView * v_bitangent);

    // re-orthogonalize T with respect to N
    cameraSpaceTangent = normalize(cameraSpaceTangent - dot(cameraSpaceTangent, cameraSpaceNormal) * cameraSpaceNormal);

    // then retrieve perpendicular vector B with the cross product of T and N
    cameraSpaceBitangent = cross(cameraSpaceNormal, cameraSpaceTangent);

    v_tbn = mat3(cameraSpaceTangent, cameraSpaceBitangent, cameraSpaceNormal);
}
